// HOUSEKEEPING FUNCTIONS FOR PROGRAMMING PURPOSES
  // Create a global variable array to separate our globals from the rest of the DOM.
  GLOB = [];

  // Function to reset Firebase
   var reset = function() {
      // Remove any previous listeners
      GLOB.trustjarRef.off();
      GLOB.trustjarRef.remove();
      location.reload(true);
    }

// CODE REQUIRED FOR UNIT TEST
  // This allows us to run the unit test as an array of individual test components.
  // The unit tests are in an array, allTests, defined as allTests = [ function() { ... }, function() { ... }, etc ]
  // runAllTests iterates through the functions in the array sequentially, 
  // and determines a pause interval between each function as specified within the unit test.
   function runAllTests( allTests, startTestNum, endTestNum ) {
     function runAllTests1( allTests, testNum ) {
      if( testNum == endTestNum ) {
        return( true );
      }
      var func = allTests[ testNum ];
      var pauseLength = func();
      if( pauseLength == -1 ) {
        return( false );
      };
      pauser = setTimeout(
        function() {
          runAllTests1( allTests, testNum + 1 );
        },
        pauseLength
      ); 
    };
    // Give subscribe enough time to work, then run tests
    setTimeout(
      function() {
        runAllTests1( allTests, startTestNum );
      },
      1000
    );
  };

function getPageId() {
    // In the real world, this will be generated by the server and hard coded into this page
    return(  "UID12345" );
}


// Define error functions (something we might eventually do)
  function badPageName( pageName ) {
    // If we can't find a page that Firebase has specified for us in a page change message, we should alert Firebase
    // Instead of writing to  Firebase, for this test, we will just issue an alert
    // alert( "Bad page name: " + pageName );
    GLOB.errorRef.push( {  
      "badPageName" : pageName
    } ); 

  }

// Define the functions for rewriting pages and switching to them, one per page
  function homePageHandler( pageData ) {
    alert( "We are switching to page 'home' with the following page data " + JSON.stringify( pageData ) );
  };
/*
  function blankPageHandler( pageData ) {
//    alert( "We are switching to page 'blank' with the following page data " + JSON.stringify( pageData ) );
      $("#blankTitle").html(pageData.blankTitleData);
      $("#blankCopy").html(pageData.blankCopyData);
      enableControls ();
  };

*/  function requestorLandingPageHandler( pageData ) {
//    alert( "We are switching to page 'requestorLanding' with the following page data " + JSON.stringify( pageData ) );
      GLOB.requestorLandingPasscode = pageData.requestorPasscode;
      $("#requestorLandingUserContact").html(pageData.userContactData);
      $("#requestorLandingPasscode").html(GLOB.requestorLandingPasscode);
      $("#requestorLandingRelationshipType").html(pageData.relationshipType);
      $("#requestorLandingCounterpartyContact").html(pageData.counterpartyContactData);
      enableControls ();
  };
 
 
  function counterpartyLandingPageHandler( pageData ) {
    // if multiple contacts are sent by the server, they will be sent as a comma-delimited list. Replace the commas with the <br>
    // tag so they can stack in the display.
    var requestorContacts = pageData.requestorContacts.replace(/,/g, '<br>');
    thiscounterpartyLandingForm = '#' + pageData.counterpartyLandingForm;
    $(thiscounterpartyLandingForm).removeClass('hidden');
    $("#counterpartyLandingRequestorName").html(pageData.requestorName);
    $("#counterpartyLandingRequestor").html(requestorContacts);
    $("#counterpartyLandingRelationshipType1").html(pageData.relationshipType);
    $("#counterpartyLandingCounterparty").html(pageData.newCounterpartyContact);
    $("#counterpartyLandingCounterparty2").html(pageData.newCounterpartyContact);
    $("#counterpartyLandingCounterparty3").html(pageData.newCounterpartyContact);
    $("#counterpartyLandingCounterparty4").html(pageData.newCounterpartyContact);
    $("#counterpartyLandingCounterparty5").html(pageData.newCounterpartyContact);
    $("#counterpartyLandingCounterparty6").html(pageData.newCounterpartyContact);
    $("#counterpartyLandingCounterparty7").html(pageData.newCounterpartyContact);
    $("#counterpartyLandingCounterparty8").html(pageData.newCounterpartyContact);
    $("#counterpartyLandingCounterparty9").html(pageData.newCounterpartyContact);
    if (pageData.counterpartyLandingForm == "counterpartyLanding2") {
      getDataOnce ("counterpartyLanding2", counterpartyLanding2PageHandler)
    };
    if (pageData.relationshipType == "exclusive") {
      $("#counterpartyLandingRelationshipType2").text("an exclusive");
      $("#counterpartyLandingCasualContent").addClass("hidden");
      $("#counterpartyLandingCasualContent2").addClass("hidden"); 
    };
    if (pageData.relationshipType == "exclusive") {
      $("#counterpartyLandingRelationshipType2").text("an exclusive");
      $("#counterpartyLandingCasualContent").addClass("hidden");
      $("#counterpartyLandingCasualContent2").addClass("hidden"); 
    };
  };

  function counterpartyLanding2PageHandler( pageData ) {
    $("#counterpartyLanding2bPasscode").html(pageData.newCounterpartyPasscode);
  };

  function homeConfirmationPageHandler( pageData ) {
    $("#homeConfirmationContact").html(pageData.confirmationContact);
  };

  function noPageData( pageData ) {
  };

/*  function receivePasscodeConfirmationPageHandler( pageData ) {
    $("#receivePasscodeConfirmationContact").html(pageData.newCounterpartyPasscode);
  };
*/
  function counterpartyCancelConfirmationPageHandler( pageData ) {
    $("#counterpartyConfirmationContact").html(pageData.newCounterpartyPasscode);
  };

// Make a map of these functions for easy lookup
  var eventListenersMap = {
    "home" : noPageData,
    "requestorLanding" : requestorLandingPageHandler,
    "counterpartyLanding" : counterpartyLandingPageHandler,
    "counterpartyLanding2" : counterpartyLanding2PageHandler,
    "homeConfirmation" : homeConfirmationPageHandler,
    "requestorCancelConfirmation" : noPageData,
//    "retrievePasscodeConfirmation" : receivePasscodeConfirmationPageHandler,
    "counterpartyCancelConfirmation" : noPageData

  }

// Set our static Firebase key path
// The following references will not be overwritten when a unique ID is received.
GLOB.uniqueId = getPageId()
GLOB.trustjarRef = new Firebase("https://trustjar.firebaseio.com");
GLOB.serverKeyPathRef = GLOB.trustjarRef + getPageId() + "/fromServer/";
GLOB.serverRef = new Firebase (GLOB.serverKeyPathRef);
GLOB.footerRef = GLOB.trustjarRef.child('commonBranch/footer');
GLOB.counterpartyLandingPageDataRef = GLOB.serverRef.child('counterpartyLanding');
// GLOB.tempRef = GLOB.trustjarRef.child('commonBranch/serverIdentifier'); 
updateListeners (GLOB.uniqueId)

function getDataOnce( pageName, handlerFunction ) {
  var pageDataKeyPath = GLOB.serverKeyPathRef + pageName;
  var thisPathRef = new Firebase (pageDataKeyPath);
  thisPathRef.once('value', function(dataSnapshot) {
    var val = dataSnapshot.val();
    return (handlerFunction (val))
  });
}

// Initialize all tooltips (bootstrap)
$(function () {
  $('[data-toggle="tooltip"]').tooltip()
})

// Disable the home (icon) link if the user is on the home page (logged out version)
if (document.location.href.match(/[^\/]+$/)[0] == 'home.html') {
   $("#home").removeAttr("href");
};

function changePage ( newPage ) {
  // if another page div is being displayed, fade it out
  $('.pageDiv').each(function() {
    var pageId = '#' + this.id;
    if ( $(pageId).css('display') == 'block') {
      $(pageId).fadeOut(250);
    }
  });
  setTimeout(function() {
    $(newPage).fadeIn(500);
    $('.anonHeader').fadeIn(500);
    $('.footer').fadeIn(500);
  }, 210);
}


// Disable the home (icon) link if the user is on the home page (logged in version)
if (document.location.href.match(/[^\/]+$/)[0] == 'dashboard.html') {
   $("#dashboardHome").removeAttr("href");
};

// Add another contact field to the current request form
function counterpartyLanding2NoToggle () {
  $( "#counterpartyLanding2a" ).addClass('hidden');
  $( "#counterpartyLanding2b" ).removeClass('hidden');
}

// Add another contact field to the current request form
function counterpartyLanding2YesToggle () {
  $( "#counterpartyLanding2a" ).removeClass('hidden');
  $( "#counterpartyLanding2b" ).addClass('hidden');
}


// Toggle show / hide passcode field for login
$('#loginShowHide').click(function() {
  var showHideState = $("#loginShowHide").html();
    if (showHideState == 'show') {
      $("#loginPasscode").attr("type", "text");
      $("#loginShowHide").html("hide");
    }
    if (showHideState == 'hide') {
      $("#loginPasscode").attr("type", "password");
      $("#loginShowHide").html("show");
    }
});


// Toggle show / hide passcode field for login
$('#loginShowPasscode').click(function() {
    if ($(this).is(':checked')) {
        $("#loginPasscode").attr("type", "text");
  } else {
        $("#loginPasscode").attr("type", "password");
  }
});

// Toggle show / hide passcode field
$('#counterpartyLanding2aPasscode').click(function() {
    if ($(this).is(':checked')) {
        $("#loginPasscode").attr("type", "text");
  } else {
        $("#loginPasscode").attr("type", "password");
  }
});

// Toggle show / hide passcode field
$('#counterpartyLanding3Passcode').click(function() {
    if ($(this).is(':checked')) {
        $("#loginPasscode").attr("type", "text");
  } else {
        $("#loginPasscode").attr("type", "password");
  }
});


  // Overlay to disable controls. This overlay is activated when the user interacts with the page in 
  // a way that sends a Firebase message to the server. Once the server responds, the overlay is removed.
  // It also includes a timer that displays a message if the server hasn't responded after a certain amount of time. 
  // For the unit test, the delay is set for 4 seconds. In production, it should be 30 seconds. 

  var td;

  function disableControls () {
    $( "#disableControls" ).removeClass( "hidden" );
    td = setTimeout(
      function () { 
        $( "#technicalDifficulties" ).removeClass( "hidden" )
      }, 4000);
    }


  function enableControls () {
    $( "#disableControls" ).addClass( "hidden" );
    $( "#technicalDifficulties" ).addClass( "hidden" );
    clearTimeout(td);
  }


// FOOTER LINKS
// Opens help overlay
$("#helpLink").click(function(){
  $("#footerOverlay").modal({backdrop: true});
  $("#modalHeader").html('trustjar Help');
  GLOB.footerRef.child('help').once('child_added', function(childSnapshot, prevChildName) {
      var val = childSnapshot.val();
      var helpCopy = val.replace('data:text/html;charset=utf-8,', '');
      $("#modalBody").html(helpCopy);
  });
});

// Opens terms and conditions overlay
$("#privacyLink").click(function(){
  $("#footerOverlay").modal({backdrop: true});
  $("#modalHeader").html('trustjar Privacy Policy');
  GLOB.footerRef.child('privacy').once('value', function(childSnapshot, prevChildName) {
    var val = childSnapshot.val();
    var privacyCopy = val.replace('data:text/html;charset=utf-8,', '');
    $("#modalBody").html(privacyCopy);
  });
});

// Opens terms and conditions overlay
$("#termsLink").click(function(){
  $("#footerOverlay").modal({backdrop: true});
  $("#modalHeader").html('trustjar Terms and Conditions');
  GLOB.footerRef.child('terms').once('child_added', function(childSnapshot, prevChildName) {
    var val = childSnapshot.val();
    var termsCopy = val.replace('data:text/html;charset=utf-8,', '');
    $("#modalBody").html(termsCopy);
  });
  });

// Opens Contact overlay
$("#contactLink").click(function(){
  $("#footerOverlay").modal({backdrop: true});
  $("#modalHeader").html('Contact trustjar');
  GLOB.footerRef.child('contact').once('child_added', function(childSnapshot, prevChildName) {
    var val = childSnapshot.val();
    var contactCopy = val.replace('data:text/html;charset=utf-8,', '');
    $("#modalBody").html(contactCopy);
  });
});



// This function is called on page load to initialize Firebase references and again
// when an ID is received to overwrite them with a reference based on the ID.

function updateListeners ( ident ) {
  GLOB.identifierRef = GLOB.trustjarRef.child(ident);
  GLOB.alertRef = GLOB.identifierRef.child('serverAlert');
  GLOB.serverRef = GLOB.identifierRef.child('fromServer');
  GLOB.clientRef = GLOB.identifierRef.child('fromClient');
//  GLOB.homePageDataRef = GLOB.serverRef.child('home');
  GLOB.blankServerRef = GLOB.serverRef.child('blank');
  GLOB.loginRef = GLOB.clientRef.child('login');
//  GLOB.requestorLandingPageDataRef = GLOB.serverRef.child('requestorLanding');
  GLOB.requestorLandingSubmitRef = GLOB.clientRef.child('requestorLanding');
  GLOB.requestorLandingCancelRef = GLOB.clientRef.child('requestorLandingCancel');
//  GLOB.counterpartyLandingPageDataRef = GLOB.serverRef.child('counterpartyLanding');
  GLOB.counterpartyLanding2PageDataRef = GLOB.serverRef.child('counterpartyLanding2');
  GLOB.counterpartyLanding1SubmitRef = GLOB.clientRef.child('counterpartyLanding1');
  GLOB.counterpartyLanding2aSubmitRef = GLOB.clientRef.child('counterpartyLanding2a');
  GLOB.counterpartyLanding2bSubmitRef = GLOB.clientRef.child('counterpartyLanding2b');
  GLOB.counterpartyLanding3SubmitRef = GLOB.clientRef.child('counterpartyLanding3');
  GLOB.counterpartyLandingCancelRef = GLOB.clientRef.child('counterpartyLandingCancel');
  GLOB.homeSubmitRequestRef = GLOB.clientRef.child('home');
  GLOB.homeConfirmationPageDataRef = GLOB.serverRef.child('homeConfirmation');
  GLOB.requestorCancelConfirmationPageDataRef = GLOB.serverRef.child('requestorCancelConfirmation');
  GLOB.displayRef = GLOB.identifierRef.child('currentPage');
  GLOB.serverAlertRef = GLOB.serverRef.child('serverAlert');
  GLOB.errorRef = GLOB.clientRef.child('error')

  // Server sets the page to be displayed
  GLOB.displayRef.on('child_added', function(childSnapshot, prevChildName) {
    // Retrieve the unique ID from the Firebase message
    var val = childSnapshot.val();
    var handlerFunction = eventListenersMap[ val ];
    if( handlerFunction == null ) {
      badPageName( val );
    } else {
      getDataOnce (val, handlerFunction)
      // prepend '#' to the pageName so we can operate on the corresponding div in the HTML
      var showNew = "#" + val;
      // fade the new page in, allowing for the old page to fade out first
      changePage(showNew);
    }
  });

  // Server sets the page to be displayed
  GLOB.displayRef.on('child_changed', function(childSnapshot, prevChildName) {
    // Retrieve the unique ID from the Firebase message
    var val = childSnapshot.val();
    var handlerFunction = eventListenersMap[ val ];
    if( handlerFunction == null ) {
      badPageName( val );
    } else {
      getDataOnce (val, handlerFunction)
      // prepend '#' to the pageName so we can operate on the corresponding div in the HTML
      var showNew = "#" + val;
      // if another page div is being displayed, fade it out
      $('.pageDiv').each(function() {
        var pageId = '#' + this.id;
        if ( $(pageId).css('display') == 'block') {
          $(pageId).fadeOut(500);
        }
      });
      // fade the new page in, allowing for the old page to fade out first
      setTimeout(function() {
        $(showNew).fadeIn(500);
        $('.anonHeader').fadeIn(500);
        $('.footer').fadeIn(500);
      }, 210);
    }
  });

  GLOB.serverAlertRef.on('child_added', function(childSnapshot, prevChildName) {
    // Retrieve the unique ID from the Firebase message
    var val = childSnapshot.val();
    if (val == "") {
      $('#serverAlertContainer').css('visibility', 'hidden');
    } else {
      enableControls();
      $('#serverAlertContainer').css('visibility', 'visible');
    };
    $("#serverAlertContent").html(val);
  });



  GLOB.serverAlertRef.on('child_changed', function(childSnapshot, prevChildName) {
    // Retrieve the unique ID from the Firebase message
    var val = childSnapshot.val();
    if (val == "") {
      $('#serverAlertContainer').css('visibility', 'hidden');
    } else {
      enableControls();
      $('#serverAlertContainer').css('visibility', 'visible');
    };
    $("#serverAlertContent").html(val);
  });



/*
  // homeDiv: populate Step 2 data, hide Step 1, show Step 2
  GLOB.blankServerRef.on('child_added', function(childSnapshot, prevChildName) {
    var val = childSnapshot.val();
    GLOB.blankTitle = val.blankTitleData;
    GLOB.blankCopy = val.blankCopyData;
      $("#blankTitle").html(GLOB.blankTitle);
      $("#blankCopy").html(GLOB.blankCopy);
      enableControls ();
  });


  // homeDiv: populate Step 2 data, hide Step 1, show Step 2
  GLOB.blankServerRef.on('child_changed', function(childSnapshot, prevChildName) {
    var val = childSnapshot.val();
    if (val !== null) {
      GLOB.blankTitle = val.blankTitleData;
      GLOB.blankCopy = val.blankCopyData;
        $("#blankTitle").html(GLOB.blankTitle);
        $("#blankCopy").html(GLOB.blankCopy);
        enableControls ();
    };
  });
*/
// close bracket for updateListeners()
};


// PUSH COMMANDS

  // Send Step 1 data to Firebase when user selects submit
  function headerSubmitLogin () {
        GLOB.loginRef.push( {  
          "loginId" : $('#loginId').val(),
          "passcode" : $('#loginPasscode').val()
        } ); 
        disableControls ()
        return false; // We don't want the form to trigger a page load. We want to do that through jQuery. 
  }



  // Send Step 1 data to Firebase when user selects submit
  function homeSubmitRequest () {
        GLOB.homeSubmitRequestRef.push( {  
          "userContact" : $('#homeUserContact').val(),
          "relationshipType" : $("input[name=homeRelationshipType]:checked").val(),
          "counterpartyContact" : $('#homeCounterpartyContact').val(),
        } ); 
        disableControls ()
        return false; // We don't want the form to trigger a page load. We want to do that through jQuery. 
  }


  // Send Step 2 data to Firebase when user selects submit. Form will display an alert if the password 
  // values don't match.
  function requestorLandingForm () {
    var Name = $('#requestorLandingName').val()
    GLOB.requestorLandingSubmitRef.push( {  
      "name" : $('#requestorLandingName').val(),
      "TOSCheckbox" : $('#requestorLandingTOS').prop( "checked" ),
      "passcode" : GLOB.requestorLandingPasscode
    }); 
    disableControls ()
    return false; // We don't want the form to trigger a page load. We want to do that through jQuery. 
  }

  // Send Step 2 data to Firebase when user selects submit. Form will display an alert if the password 
  // values don't match.
  function requestorLandingCancel () {
    GLOB.requestorLandingCancelRef.push( {  
      "cancelRequest" : true
    }); 
    disableControls ()
    return false; // We don't want the form to trigger a page load. We want to do that through jQuery. 
  }


  // Called when a counterparty selects 'cancel' on a counterpartyLanding page form. Since the passcode is the important
  // variable, all counterpartyLanding form variations use the same function and send the passcode to the same Firebase reference.
  function counterpartyLandingCancel () {
    GLOB.counterpartyLandingCancelRef.push( {  
      "cancelRequest" : true
    }); 
    disableControls ()
    return false; // We don't want the form to trigger a page load. We want to do that through jQuery. 
  }

  // Submit login credentials to confirm identity (via page body form) in counterpartyLanding1Div
  function counterpartyLanding1Submit () {
    GLOB.counterpartyLanding1SubmitRef.push( {  
      "TOSCheckbox" : $('#counterpartyLanding1TOSCheckbox').prop( "checked" ),
    } ); 
    disableControls ()
    return false; // We don't want the form to trigger a page load. We want to do that through jQuery. 
  }


  // Submit login credentials to confirm identity (via page body form) in counterpartyLanding1Div
  function counterpartyLanding2aSubmit () {
    GLOB.counterpartyLanding2aSubmitRef.push( {  
      "TOSCheckbox" : $('#counterpartyLanding2aTOSCheckbox').prop( "checked" ),
    } ); 
    disableControls ()
    return false; // We don't want the form to trigger a page load. We want to do that through jQuery. 
  }


  // Submit login credentials to confirm identity (via page body form) in counterpartyLanding1Div
  function counterpartyLanding2bSubmit () {
    GLOB.counterpartyLanding2bSubmitRef.push( {  
      "newCounterpartyPasscode" : GLOB.counterpartyLandingPasscode,
      "counterpartyName" : $('#counterpartyLanding2bName').val(),
      "TOSCheckbox" : $('#counterpartyLanding2bTOSCheckbox').prop( "checked" ),
    } ); 
    disableControls ()
    return false; // We don't want the form to trigger a page load. We want to do that through jQuery. 
  }

  // Submit login credentials to confirm identity (via page body form) in counterpartyLanding1Div
  function counterpartyLanding3Submit () {
    GLOB.counterpartyLanding3SubmitRef.push( {  
      "counterpartyPasscode" : $('#counterpartyLanding3Passcode').val(),
      "TOSCheckbox" : $('#counterpartyLanding3TOSCheckbox').prop( "checked" ),
    } ); 
    disableControls ()
    return false; // We don't want the form to trigger a page load. We want to do that through jQuery. 
  }

  // Add another contact field to the user's profile. Called if user is entering multiple contacts at once.
  function addProfileContact () {
    $( "#addContactProfile" ).before( "<div class='form-group' style='margin-bottom:8px'><input type='email' class='form-control' id='newContact1' placeholder='phone or email'></div>" );
  }

  // Add another contact field to the current request form. Called if user is entering multiple contacts at once.
  function addContact () {
    $( "#addContactDash" ).before( "<div class='form-group' style='margin-bottom:8px'><input type='email' class='form-control' id='newContact1' placeholder='phone or email'></div>" );
  }


  // Add another contact field to the current request form
  function forgotShowStep2 () {
    $( "#forgothomeRequest" ).hide();
    $( "#contactChanged" ).hide();
    $( "#forgotStep2" ).show();
  }

  // Displays the Registration form in counterpartyLanding2.html
  function counterpartyLanding2ShowrequestorcounterpartyLanding () {
    $( "#counterpartyLanding2requestorcounterpartyLanding" ).removeClass( "hidden" );
    $( "#counterpartyLanding2Credentials" ).addClass( "hidden" );
  }

  // Displays the login credentials form in counterpartyLanding2.html
  function counterpartyLanding2ShowCredentials () {
    $( "#counterpartyLanding2requestorcounterpartyLanding" ).addClass( "hidden" );
    $( "#counterpartyLanding2Credentials" ).removeClass( "hidden" );
  }


/*
    function initialize() {
      // Send authentication credentials if they're present
        GLOB.authRef.push( {  
          "authToken" : "test",
        } ); 
      // Confirm that the page is ready in the Javascript console
    }

    window.onload = initialize();




    function initialize() {
      // Remove any previous listeners
      GLOB.trustjarRef.off();
      GLOB.trustjarRef.remove();

    }
*/


