// Create a global variable array to separate our globals from the rest of the DOM.
	GLOB = [];

// Function to initialize unit test
	var initializeUnitTest = function() {
		// Remove any previous listeners
		GLOB.trustjarRef.off();
		GLOB.trustjarRef.remove();
		location.reload(true);
	}

// CODE REQUIRED FOR UNIT TEST
	// This allows us to run the unit test as an array of individual test components.
	// The unit tests are in an array, allTests, defined as allTests = [ function() { ... }, function() { ... }, etc ]
	// runAllTests iterates through the functions in the array sequentially, 
	// and determines a pause interval between each function as specified within the unit test.
	 function runAllTests( allTests, startTestNum, endTestNum ) {
		 function runAllTests1( allTests, testNum ) {
			if( testNum == endTestNum ) {
				return( true );
			}
			var func = allTests[ testNum ];
			var pauseLength = func();
			if( pauseLength == -1 ) {
				return( false );
			};
			pauser = setTimeout(
				function() {
					runAllTests1( allTests, testNum + 1 );
				},
				pauseLength
			); 
		};
		// Give subscribe enough time to work, then run tests
		setTimeout(
			function() {
				runAllTests1( allTests, startTestNum );
			},
			1000
		);
	};

// NON-FIREBASE FUNCTIONS

	// Initialize all tooltips (required by bootstrap)
	$(function () {
		$('[data-toggle="tooltip"]').tooltip()
	})

	// Retrieve the unique ID from Firebase and assign it to a global variable. 
	// We'll use it to create the main branch for client / server communications.
	GLOB.uniqueId = getPageId()

	// Toggle show / hide passcode field for login. This removes the mask
	// from hte passcode field so the user can visually confirm that it's correct.
	$('#loginShowHide').on('click', function() {
		var showHideState = $("#loginShowHide").html();
			if (showHideState == 'show') {
				$("#loginPasscode").attr("type", "text");
				$("#loginShowHide").html("hide");
			}
			if (showHideState == 'hide') {
				$("#loginPasscode").attr("type", "password");
				$("#loginShowHide").html("show");
			}
	});


	// Toggle show / hide passcode field for counterpartyLandingExistingUsera. This removes the mask
	// from hte passcode field so the user can visually confirm that it's correct.
	$('#counterpartyLandingExistingUseraShowHide').on('click', function() {
		var showHideState = $("#counterpartyLandingExistingUseraShowHide").html();
			if (showHideState == 'show') {
				$("#counterpartyLandingExistingUseraPasscode").attr("type", "text");
				$("#counterpartyLandingExistingUseraShowHide").html("hide");
			}
			if (showHideState == 'hide') {
				$("#counterpartyLandingExistingUseraPasscode").attr("type", "password");
				$("#counterpartyLandingExistingUseraShowHide").html("show");
			}
	});


	// Expand / collapse 'what is Trustjar?' element
	$('#whatIsTrustjar').on('click', function() {
		$('#whatIsTrustjarCopy').toggle()
	});

	function goToNewPage(newURL){
		GLOB.goToNewURL = newURL;
	}


	// Overlay to disable controls. This overlay is activated when the client sends a Firebase message 
	// to the server. Once the server responds, the overlay is removed.
	// It also includes a timer that displays a message if the server hasn't responded after a certain amount of time. 
	// For the unit test, the delay is set for 4 seconds. In production, it should be 30 seconds. 
	var td;
	function disableControls () {
	$( "#disableControls" ).removeClass( "hidden" );
	td = setTimeout(
		function () { 
			$( "#technicalDifficulties" ).removeClass( "hidden" )
		}, 4000);
	}

	// Overlay to enable controls. Called when the client detects a new message on the server branch.
	function enableControls () {
		$( "#disableControls" ).addClass( "hidden" );
		$( "#technicalDifficulties" ).addClass( "hidden" );
		clearTimeout(td);
	}

// SESSION ID PLACEHOLDER
	function getPageId() {
			// This is a placeholder. In the real world, this will be generated by the server and hard coded into this page
			return(  "UID12345" );
	}

// FIREBASE REFERENCES
	// Set our static Firebase key path
	// The following references will not be overwritten when a unique ID is received.
	GLOB.trustjarRef = new Firebase("https://trustjartemp.firebaseio.com");
//	GLOB.identifierRef = GLOB.trustjarRef.child(GLOB.uniqueId);
	GLOB.clientRef = GLOB.trustjarRef.child('sessions/fromClient/' + GLOB.uniqueId);
	GLOB.serverRef = GLOB.trustjarRef.child('sessions/fromServer/' + GLOB.uniqueId);
	GLOB.displayRef = GLOB.serverRef.child('currentPage');
	GLOB.footerRef = GLOB.trustjarRef.child('commonBranch/footer');
	GLOB.requestorLandingPageDataRef = GLOB.serverRef.child('requestorLandingPageData');
	GLOB.counterpartyLandingPageDataRef = GLOB.serverRef.child('counterpartyLandingPageData'); 
	GLOB.counterpartyLandingNewUserPageDataRef = GLOB.serverRef.child('counterpartyLandingNewUserPageData'); 
	GLOB.homeConfirmationPageDataRef = GLOB.serverRef.child('homeConfirmation');
	GLOB.requestorCancelConfirmationPageDataRef = GLOB.serverRef.child('requestorCancelConfirmation');
	GLOB.serverAlertRef = GLOB.serverRef.child('serverAlert');
	GLOB.counterpartyLandingFormRef = GLOB.serverRef.child('counterpartyLandingForm');

// PAGE DATA FUNCTIONS
	// Define the functions for populating pages with server-generated page data.

	// Make a map of page names and corresponding page data functions for easy lookup
		var eventListenersMap = {
			"home" : noPageData,
			"homeConfirmation" : noPageData,
			"requestPasscodePage" : noPageData,
			"requestPasscodeConfirmation": noPageData,
			"requestorLanding" : requestorLandingPageHandler,
			"requestorCancelConfirmation" : noPageData,
			"counterpartyLanding" : counterpartyLandingPageHandler,
			"counterpartyLandingNewUser" : counterpartyLandingNewUserPageHandler,
			"counterpartyCancelConfirmation" : noPageData, 
			"blank" : noPageData // This line is for the unit test only and can be reomved during production.
		}

	
		// THis function is used for pages that require no page data to populate them.
		function noPageData( pageData ) {
		};

		// Populate page data for the requestorLanding page. This is the page the requestor returns to after 
		// confirming their email address or phone number.
		function requestorLandingPageHandler( pageData ) {
			// Server assigns a new passcode for the requestor which is displayed. Because the requestor 
			// will return this passcode when the form is submitted, we'll declare the value as a global variable.
			GLOB.requestorLandingPasscode = pageData.newRequestorPasscode;
			// Populate and display the relationship components and the requestor passcode
			$("#requestorLandingContact").html(pageData.requestorContact);
			$("#requestorLandingPasscode").html(GLOB.requestorLandingPasscode);
			$("#requestorLandingRelationshipType").html(pageData.relationshipType);
			$("#requestorLandingCounterpartyContact").html(pageData.counterpartyContact);
		};
	 
		function counterpartyLandingPageHandler( pageData ) {
			// if multiple contacts are sent by the server, they will be sent as a comma-delimited list. 
			// This replace the commas with the <br> tag so they will stack vertically in the display.
			var requestorContacts = pageData.requestorContacts.replace(/,/g, '<br>');
			// Retrieve which of four versions of the form appear and format it as a div element
			thiscounterpartyLandingForm = '#counterpartyLanding' + pageData.counterpartyLandingForm + 'Form';
			// Display the proper form
			$(thiscounterpartyLandingForm).removeClass('hidden');
			// Populate the relationship data
			$("#counterpartyLandingRequestorName").html(pageData.requestorName);
			$("#counterpartyLandingRequestor").html(requestorContacts);
			$("#counterpartyLandingRelationshipType1").html(pageData.relationshipType);
			$("#counterpartyLandingFormCopy").html(pageData.counterpartyLandingFormCopy);
			$("#counterpartyLandingContact").html(pageData.newCounterpartyContact);
			// There are several places in the page where the counterparty contact is displayed,
			// mostly as contextual copy. This populates all possible display elements for this, 
			// across all four forms.
			$("#counterpartyLandingContact2").html(pageData.newCounterpartyContact);
			$("#counterpartyLandingContact3").html(pageData.newCounterpartyContact);
			$("#counterpartyLandingContact4").html(pageData.newCounterpartyContact);
			$("#counterpartyLandingContact5").html(pageData.newCounterpartyContact);
			$("#counterpartyLandingContact6").html(pageData.newCounterpartyContact);
			$("#counterpartyLandingContact7").html(pageData.newCounterpartyContact);
			$("#counterpartyLandingContact8").html(pageData.newCounterpartyContact);
			$("#counterpartyLandingContact9").html(pageData.newCounterpartyContact);
			// If the form displayed is counterpartyLandingExistingUser, call the counterpartyLandingExistingUserPageHandler
			// to populate additional data specific to that form.
			if (pageData.counterpartyLandingForm == "NewUser") {
				getDataOnce ("counterpartyLandingNewUser", counterpartyLandingNewUserPageHandler)
			};
			// There are slight copy changes depending on whether the relationship is casual or exclusive.
			// This ensures that the copy reads properly depending on relationship type.
			if (pageData.relationshipType == "exclusive") {
				$("#counterpartyLandingRelationshipType2").text("an exclusive");
				$("#counterpartyLandingCasualContent").addClass("hidden");
				$("#counterpartyLandingCasualContent2").addClass("hidden"); 
			};
			if (pageData.relationshipType == "casual") {
				$("#counterpartyLandingRelationshipType2").text("a casual");
				$("#counterpartyLandingCasualContent").removeClass("hidden");
				$("#counterpartyLandingCasualContent2").removeClass("hidden"); 
			};
		};

		// An additional element (the passcode for a counterparty who's new to the system) is 
		// retrieved and displayed only if the counterpartyLandingExistingUser form is called.
		function counterpartyLandingNewUserPageHandler( pageData ) {
			// Assign this to a global variable. We do this because we will return this value
			// to Firebase when the user submits the form.
			GLOB.counterpartyLandingPasscode = pageData.newCounterpartyPasscode;
			$("#counterpartyLandingNewUserPasscode").html(GLOB.counterpartyLandingPasscode);
		};

		// When a new requestor submits the 'home' form, the confirmation page displays
		// the entered requestor contact as part of the page copy.
		function homeConfirmationPageHandler( pageData ) {
			$("#homeConfirmationContact").html(pageData.confirmationContact);
		};

  /*
	// Use the page name and the corresponding page handler function (as defined by the eventsListenerMap)
	// The naming conventions were designed so they could be programmatically constructed based on the page name.
	function getDataOnce( pageName, handlerFunction ) {
		// Construct the URL corresponding to the Firebase page data reference, based on the page name.
		var pageDataKeyPath = GLOB.serverRef + '/' + pageName;
		// Create a true Firebase reference based on the URL constructed in the previous line.
		var thisPathRef = new Firebase (pageDataKeyPath);
		// Retrieve the data at the new Firebase reference
		thisPathRef.on('child_added', function(dataSnapshot) {
			var val = dataSnapshot.val();
			alert(val)
			// Send the retrieved data to the corresponding handler function
			return (handlerFunction (val))
		});
		thisPathRef.on('child_changed', function(dataSnapshot) {
			var val = dataSnapshot.val();
			// Send the retrieved data to the corresponding handler function
			return (handlerFunction (val))
		});
	}
  */
	// Use the page name and the corresponding page handler function (as defined by the eventsListenerMap)
	// The naming conventions were designed so they could be programmatically constructed based on the page name.
	function getDataOnce( pageName, handlerFunction ) {
		// Construct the URL corresponding to the Firebase page data reference, based on the page name.
		var pageDataKeyPath = GLOB.serverRef + '/' + pageName + 'PageData';
		// Create a true Firebase reference based on the URL constructed in the previous line.
		var thisPathRef = new Firebase (pageDataKeyPath);
		// Retrieve the data at the new Firebase reference
		thisPathRef.once('value', function(dataSnapshot) {
			var val = dataSnapshot.val();
			// Send the retrieved data to the corresponding handler function
			return (handlerFunction (val))
		});
	}

// FIREBASE SERVER FUNCTIONS
	// Page display functions
	GLOB.displayRef.on('value', function(dataSnapshot) {
		// Retrieve the unique ID from the Firebase message
		var val = dataSnapshot.val();
		if (val !== null) {		
			var handlerFunction = eventListenersMap[ val ];
			var checkURL = val.substring(0,3)
			if( checkURL == 'URL' ) {
				var newPage = val.substring(4);
				// This function will replace the current one as soon as we have a solution for DOM continuity on HTML page change.
				// For the time being, it's commented out.
				// window.location = newPage

				// In the meantime, we'll call a function for the unit test.
				goToNewPage(newPage)
			} else {
				if( handlerFunction == null ) {
					badPageName( val );
				} else {
					getDataOnce (val, handlerFunction)
					// prepend '#' to the pageName so we can operate on the corresponding div in the HTML
					var showNew = "#" + val;
					// if the display is still showing the splash page, fade it out. SplashDiv is not part of the pageTemplate class
					// because 'pageTemplate's are hidden by default, and the splash is displayed by default.
					$('#splashDiv').fadeOut(300);
					// if another page div is being displayed, fade it out
					$('.pageTemplate').each(function() {
						var pageId = '#' + this.id;
						if ( $(pageId).css('display') == 'block') {
							$(pageId).fadeOut(300);
							// Remove the 'disable controls' overlay if one is present
							enableControls();
							$('#whatIsTrustjar').fadeOut(300)
						}
					});
					// fade the new page in, allowing for the old page to fade out first
					setTimeout(function() {
						$(showNew).fadeIn(300);
						$('.anonHeader').fadeIn(300);
						$('.footer').fadeIn(300);
						$('#whatIsTrustjar').fadeIn(300)
					}, 300);
					// Disable the 'return to home' link in the header logo if the user's already on the homepage.
					if (showNew == '#home') {
						$('#headerLogoLink').filter(function(){
						    return this.innerHTML === 'trustjar';
						}).replaceWith('trustjar');
					}
				}
			}
		}
	});

	// Server alert functions
	GLOB.serverAlertRef.on('value', function(dataSnapshot) {
		// Retrieve the alert string from the Firebase message
		var val = dataSnapshot.val();
		// If the alert comtent is empty, hide the server alert
		if (val == undefined) {
			$('#serverAlertContainer').fadeTo(500, 0, function(){
	   		$('#serverAlertContainer').css("visibility", "hidden");   
	   		// The opacity must be reset because opacity was the attribute used for the fade effect.  
	   		$('#serverAlertContainer').css("opacity", "100");   
			});
		} else {
		// If the alert comtent is not empty, show the server alert and remove the overlay
		// that disables user controls.
			enableControls();
			$('#serverAlertContainer').css('visibility', 'visible').hide().fadeIn('slow');
		};
		$("#serverAlertContainer").html(val);
	});

	// CounterpartyLanding form toggle
	// When a user is anonymous, we present the anonymous user form within the counterpartyLanding page.
	// Depending on the user's choice (Y/N), we hide the anonymous user form and present either 
	// the existing user form (Y) or the new user form (N).
	GLOB.counterpartyLandingPageDataRef.on('child_changed', function(childSnapshot, prevChildName) {
		// Retrieve the unique ID from the Firebase message
		var val = childSnapshot.val();
		if (val == "ExistingUser") {
			enableControls();
			$( "#counterpartyLandingExistingUserForm" ).removeClass('hidden');
			$( "#counterpartyLandingAnonymousUserForm" ).addClass('hidden');
		}
		if (val == "NewUser") {
			enableControls();
			$( "#counterpartyLandingNewUserForm" ).removeClass('hidden');
			$( "#counterpartyLandingAnonymousUserForm" ).addClass('hidden');
		}
	});

	// Footer content
		// Retrieves help content from Firebase and opens the Help overlay
		$("#helpLink").click(function(){
			$("#footerOverlay").modal({backdrop: true});
			$("#modalHeader").html('trustjar Help');
			GLOB.footerRef.child('help').once('value', function(childSnapshot, prevChildName) {
					var val = childSnapshot.val();
					var helpCopy = val.copy.replace('data:text/html;charset=utf-8,', '');
					$("#modalBody").html(helpCopy);
			});
		});

		// Retrieves Privacy Policy content and opens the Privacy Policy overlay
		$("#privacyLink").click(function(){
			$("#footerOverlay").modal({backdrop: true});
			$("#modalHeader").html('trustjar Privacy Policy');
			GLOB.footerRef.child('privacy').once('value', function(childSnapshot, prevChildName) {
				var val = childSnapshot.val();
				var privacyCopy = val.copy.replace('data:text/html;charset=utf-8,', '');
				$("#modalBody").html(privacyCopy);
			});
		});

		// Retrieves Terms and Conditions content and opens the Terms and Conditions overlay
		$("#termsLink").click(function(){
			$("#footerOverlay").modal({backdrop: true});
			$("#modalHeader").html('trustjar Terms and Conditions');
			GLOB.footerRef.child('terms').once('value', function(childSnapshot, prevChildName) {
				var val = childSnapshot.val();
				var termsCopy = val.copy.replace('data:text/html;charset=utf-8,', '');
				$("#modalBody").html(termsCopy);
			});
			});

		// Retrieves 'Contact Us' content and opens the Contact Us overlay.
		$("#contactLink").click(function(){
			$("#footerOverlay").modal({backdrop: true});
			$("#modalHeader").html('Contact trustjar');
			GLOB.footerRef.child('contact').once('value', function(childSnapshot, prevChildName) {
				var val = childSnapshot.val();
				var contactCopy = val.copy.replace('data:text/html;charset=utf-8,', '');
				$("#modalBody").html(contactCopy);
			});
		});

// FIREBASE CLIENT FUNCTIONS

	// Error functions
	// This is currently set only for the 'bad page name' case below.
		function badPageName( pageName ) {
			// If the client can't find a page that Firebase has specified for it in a page change message, alert Firebase
			GLOB.clientRef.push( {  
				"msgType": "pageDataError",
				"badPageName" : pageName
			} ); 
		}

	// User submits a login from the header
		function headerSubmitLogin () {
					GLOB.clientRef.push( {
						"msgType": "loginForm",
						"loginId" : $('#loginId').val(),
						"passcode" : $('#loginPasscode').val()
					} ); 
					disableControls ()
					return false; // We don't want the form to trigger a page load. We want to do that through jQuery. 
		}

	// User submits a login from the header
		function requestPasscodeSubmit () {
					GLOB.clientRef.push( {
						"msgType": "requestPasscode",
						"userContact" : $('#userContact').val(),
					} ); 
					disableControls ()
					return false; // We don't want the form to trigger a page load. We want to do that through jQuery. 
		}

	// New requestor sends 'home' form request to Firebase when user selects submit
		function homeSubmitRequest () {
					GLOB.clientRef.push( {  
						"msgType": "newRequestorForm",
						"userContact" : $('#homeUserContact').val(),
						"relationshipType" : $("input[name=homeRelationshipType]:checked").val(),
						"counterpartyContact" : $('#homeCounterpartyContact').val(),
					}); 
					disableControls ()
					return false; // We don't want the form to trigger a page load. We want to do that through jQuery. 
		}

		// Requestor submits the form on the requestor landing page to confirm the relationship request.
		function requestorLandingForm () {
			GLOB.clientRef.push( {  
				"msgType": "newRequestorLandingForm",
				"name" : $('#requestorLandingName').val(),
				"TOSCheckbox" : $('#requestorLandingTOS').prop( "checked" )
			}); 
			// Disable user controls
			disableControls ()
			return false; // We don't want the form to trigger a page load. We want to do that through jQuery. 
		}

		// Counterparty answers the question: "Do you have an existing Trustjar account?"
		$('#isCurrentUser').on('change', function() {
			GLOB.clientRef.push( { 
				"msgType" : "counterpartyLandingAnonymousUserForm",
				"existingUser" : $('input[name="currentUser"]:checked').val()
			}); 
			// Disable user controls
			disableControls ()
		});

		// User requests a return to the Home page
		$('.goHome').on('click', function() {
		// $('document.body').on('click', '.goHome', function() {
			GLOB.clientRef.push( {  
				"msgType" : "returnToHomepage"
			}); 
			// Disable user controls
			disableControls ();
			return false; // We don't want the link to trigger a page load. We want the server to control that to maintain state consistency.
		});


		// User selects the 'Request Passcode' link in the header
		$('#requestPasscodeLink').on('click', function() {
		// $('document.body').on('click', '.goHome', function() {
			GLOB.clientRef.push( {  
				"msgType" : "requestPasscode"
			}); 
			// Disable user controls
			disableControls ();
			return false; // We don't want the link to trigger a page load. We want the server to control that to maintain state consistency.
		});


		// User submits 'request passcode' from the requestPasscode page
		$('#requestPasscodeSubmitBtn').on('click', function() {
		// $('document.body').on('click', '.goHome', function() {
			GLOB.clientRef.push( {  
				"msgType" : "requestPasscodeForm",
				"userContact" : $('#requestPasscodeUserContact').val()
			}); 
			// Disable user controls
			disableControls ();
			return false; // We don't want the link to trigger a page load. We want the server to control that to maintain state consistency.
		});

		// Requestor selects 'cancel' on a requestorLanding page form. All versions of the counterparty
		// landing page use this function.
		$("#counterpartyCancelConfirmBtn").click(function(){
			GLOB.clientRef.push( {  
				"msgType": "counterpartyLandingCancel"
			}); 
			// Disable user controls
			disableControls ()
		});


		// Counterparty selects 'cancel' on a counterpartyLanding page form. All versions of the counterparty
		// landing page use this function.
		$("#requestorCancelRequestBtn").click(function(){
			GLOB.clientRef.push( {  
				"msgType": "requestorLandingCancel"
			}); 
			// Disable user controls
			disableControls ()
		});

		$(".counterpartyCancelBtn").click(function(){
			$("#counterpartyCancelRelationshipOverlay").modal({backdrop: true});
		});

		$(".requestorCancelBtn").click(function(){
			$("#requestorCancelRelationshipOverlay").modal({backdrop: true});
		});

		function counterpartyLandingCancel () {
			// GLOB.clientRef.push( {  
			// 	"msgType": "counterpartyLandingCancel"
			// }); 
			// // Disable user controls
			// disableControls ()
			// return false; // We don't want the form to trigger a page load. We want to do that through jQuery. 
		}

		// Counterparty submits landing page form to approve the relationship request. THis function is used 
		// specifically by counterpartyLandingAnonymousUserForm.
		function counterpartyLandingAnonymousUserSubmit () {
			GLOB.clientRef.push( {  
				"msgType": "counterpartyLandingAnonymousUserForm",
				"TOSCheckbox" : $('#counterpartyLandingAnonymousUserTOSCheckbox').prop( "checked" )
			} ); 
			// Disable user controls
			disableControls ()
			return false; // We don't want the form to trigger a page load. We want to do that through jQuery. 
		}


		// Counterparty submits landing page form to approve the relationship request. THis function is used 
		// specifically by counterpartyLandingExistingUserForma.
		function counterpartyLandingExistingUserSubmit () {
			GLOB.clientRef.push( {  
				"msgType": "counterpartyLandingExistingUserForm",
				"counterpartyPasscode" : $('#counterpartyLandingExistingUserPasscode').val(),
				"TOSCheckbox" : $('#counterpartyLandingExistingUserTOSCheckbox').prop( "checked" )
			} ); 
			// Disable user controls
			disableControls ()
			return false; // We don't want the form to trigger a page load. We want to do that through jQuery. 
		}


		// Counterparty submits landing page form to approve the relationship request. THis function is used 
		// specifically by counterpartyLandingExistingUserFormb.
		function counterpartyLandingNewUserSubmit () {
			GLOB.clientRef.push( {  
				"msgType": "counterpartyLandingNewUserForm",
				"counterpartyName" : $('#counterpartyLandingNewUserName').val(),
				"TOSCheckbox" : $('#counterpartyLandingNewUserTOSCheckbox').prop( "checked" ),
			} ); 
			// Disable user controls
			disableControls ()
			return false; // We don't want the form to trigger a page load. We want to do that through jQuery. 
		}
/*  CODE THAT MAY BE USED FOR DASHBOARD PAGES
		// Add another contact field to the user's profile. Called if user is entering multiple contacts at once.
		function addProfileContact () {
			$( "#addContactProfile" ).before( "<div class='form-group' style='margin-bottom:8px'><input type='email' class='form-control' id='newContact1' placeholder='phone or email'></div>" );
		}

		// Add another contact field to the current request form. Called if user is entering multiple contacts at once.
		function addContact () {
			$( "#addContactDash" ).before( "<div class='form-group' style='margin-bottom:8px'><input type='email' class='form-control' id='newContact1' placeholder='phone or email'></div>" );
		}
*/